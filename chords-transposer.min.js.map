{"version":3,"file":"chords-transposer.min.js","sources":["index.js"],"sourcesContent":["// prettier-ignore\nconst chordsArrangement = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n// prettier-ignore\nconst chordsArrangementFlat = [\"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\"];\nexport class Transpose {\n    constructor(song) {\n        this.chords = this.parse(song);\n        this.song = song;\n    }\n    /**\n     * Finds chords in a given line of text.\n     *\n     * @param line - The line of text to search for chords.\n     * @param offset - The offset of the line within the larger text.\n     * @returns An array of Chord objects containing the chord and its position.\n     */\n    findChords(line, offset) {\n        const modifiedLine = line\n            .replace(/\\||\\t|\\-|\\/|\\(|\\)|\\,|\\s/g, \" \")\n            .replace(/[\\[\\]']+/g, \" \")\n            .trim();\n        const reg = /^ *[A-Ga-g](#|b|&)?m?\\+?(sus|add|maj|dim|aug)?[0-9]?( *(-|\\/) *[A-G](#|b)?)?( +[A-Ga-g](#|b|&)?m?\\+?(sus|add|maj|dim|aug)?[0-9]?( *(-|\\/) *[A-G](#|b|&)?)? *)* *$/g;\n        const reguniq = /[A-Ga-g](#|b|&)?m?\\+?(sus|add|maj|dim|aug)?[0-9]?( *(-|\\/) *[A-G](#|b|&)?)? */g;\n        if (!modifiedLine.match(reg)) {\n            return [];\n        }\n        const chordsWithPositions = [];\n        let match;\n        while ((match = reguniq.exec(line)) !== null) {\n            chordsWithPositions.push({\n                chord: match[0].trim(), // Trim to remove leading/trailing spaces\n                position: match.index + offset\n            });\n        }\n        return chordsWithPositions;\n    }\n    /**\n     * Parses a string containing chords and returns an array of Chord objects.\n     *\n     * @param src - The string to be parsed.\n     * @returns An array of Chord objects.\n     */\n    parse(src) {\n        // Parse a text with chords and highlight guitar chords\n        const src_textArray = src.split(/\\r\\n|\\r|\\n/g);\n        let offset = 0;\n        const chords = [];\n        // Process each line in the src_textArray\n        for (let i = 0; i < src_textArray.length; i++) {\n            chords.push(...this.findChords(src_textArray[i], offset));\n            offset += src_textArray[i].length + 1;\n        }\n        return chords;\n    }\n    /**\n     * Adds HTML tags to highlight chords in the song.\n     *\n     * @returns The updated song string with chord highlighting tags.\n     */\n    getWithTags() {\n        // Add '<span class=\"chords-highlighted\">...</span>' into the code\n        let offset = 0;\n        const firstString = '<span class=\"chords-highlighted\">';\n        const secondString = \"</span>\";\n        let updatedSong = this.song;\n        this.chords.forEach((value) => {\n            const index = value.position + offset; // Apply offset\n            let start = index;\n            while (start < updatedSong.length && !updatedSong[start].match(/\\s/)) {\n                start++;\n            }\n            // Calculate the position to insert the tags\n            updatedSong =\n                updatedSong.slice(0, index) +\n                    firstString +\n                    value.chord +\n                    secondString +\n                    updatedSong.slice(start);\n            // Update the position for the next iteration\n            offset +=\n                firstString.length +\n                    secondString.length +\n                    value.chord.length -\n                    (start - index);\n        });\n        return updatedSong;\n    }\n    /**\n     * Shifts the scale of the chords by the specified amount.\n     *\n     * @param shiftBy The amount to shift the scale by. This could be a positive or negative number.\n     * @returns An array of updated chords with the shifted scale.\n     */\n    shiftScale(shiftBy) {\n        let refArrangement = null;\n        const updatedChords = this.chords.map((chord) => {\n            if (refArrangement === null) {\n                refArrangement =\n                    chordsArrangement.indexOf(chord.chord) !== -1\n                        ? chordsArrangement\n                        : chordsArrangementFlat;\n            }\n            // check if the chord is a minor chord\n            let searchKey = chord.chord;\n            let isMinor = false;\n            if (chord.chord[chord.chord.length - 1] === \"m\") {\n                searchKey = chord.chord.slice(0, chord.chord.length - 1);\n                isMinor = true;\n            }\n            const currentIndex = refArrangement.indexOf(searchKey);\n            let finalPosition = currentIndex + shiftBy;\n            if (finalPosition < 0) {\n                finalPosition =\n                    (refArrangement.length + finalPosition) % refArrangement.length;\n            }\n            else {\n                finalPosition %= refArrangement.length;\n            }\n            return {\n                chord: `${refArrangement[finalPosition]}${isMinor ? \"m\" : \"\"}`,\n                position: chord.position\n            };\n        });\n        return updatedChords;\n    }\n    /**\n     * Shifts the scale of the chords by the specified amount.\n     *\n     * @param shiftBy The amount to shift the scale by. This could be either positive or negative number.\n     * @returns The instance of the class with the shifted scale.\n     */\n    shiftScaleBy(shiftBy) {\n        this.chords = this.shiftScale(shiftBy);\n        return this;\n    }\n    /**\n     * Shifts the scale from one chord to another chord.\n     *\n     * @param from The chord to shift from.\n     * @param to The chord to shift to.\n     * @returns The updated instance of the ChordsTransposer class.\n     */\n    shiftScaleFromTo(from, to) {\n        const arrangement = chordsArrangement.indexOf(from) !== -1 &&\n            chordsArrangement.indexOf(to) !== -1\n            ? chordsArrangement\n            : chordsArrangementFlat;\n        const diff = arrangement.indexOf(to) - arrangement.indexOf(from);\n        this.chords = this.shiftScale(diff);\n        return this;\n    }\n}\nexport default Transpose;\n//# sourceMappingURL=index.js.map"],"names":["chordsArrangement","chordsArrangementFlat","Transpose","constructor","song","this","chords","parse","findChords","line","offset","reguniq","replace","trim","match","chordsWithPositions","exec","push","chord","position","index","src","src_textArray","split","i","length","getWithTags","firstString","secondString","updatedSong","forEach","value","start","slice","shiftScale","shiftBy","refArrangement","map","indexOf","searchKey","isMinor","finalPosition","shiftScaleBy","shiftScaleFromTo","from","to","arrangement","diff"],"mappings":"wPACA,MAAMA,EAAoB,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAEjFC,EAAwB,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KACpF,MAAMC,EACT,WAAAC,CAAYC,GACRC,KAAKC,OAASD,KAAKE,MAAMH,GACzBC,KAAKD,KAAOA,CACf,CAQD,UAAAI,CAAWC,EAAMC,GACb,MAKMC,EAAU,iFAChB,IANqBF,EAChBG,QAAQ,2BAA4B,KACpCA,QAAQ,YAAa,KACrBC,OAGaC,MAFN,sKAGR,MAAO,GAEX,MAAMC,EAAsB,GAC5B,IAAID,EACJ,KAAwC,QAAhCA,EAAQH,EAAQK,KAAKP,KACzBM,EAAoBE,KAAK,CACrBC,MAAOJ,EAAM,GAAGD,OAChBM,SAAUL,EAAMM,MAAQV,IAGhC,OAAOK,CACV,CAOD,KAAAR,CAAMc,GAEF,MAAMC,EAAgBD,EAAIE,MAAM,eAChC,IAAIb,EAAS,EACb,MAAMJ,EAAS,GAEf,IAAK,IAAIkB,EAAI,EAAGA,EAAIF,EAAcG,OAAQD,IACtClB,EAAOW,QAAQZ,KAAKG,WAAWc,EAAcE,GAAId,IACjDA,GAAUY,EAAcE,GAAGC,OAAS,EAExC,OAAOnB,CACV,CAMD,WAAAoB,GAEI,IAAIhB,EAAS,EACb,MAAMiB,EAAc,oCACdC,EAAe,UACrB,IAAIC,EAAcxB,KAAKD,KAqBvB,OApBAC,KAAKC,OAAOwB,SAASC,IACjB,MAAMX,EAAQW,EAAMZ,SAAWT,EAC/B,IAAIsB,EAAQZ,EACZ,KAAOY,EAAQH,EAAYJ,SAAWI,EAAYG,GAAOlB,MAAM,OAC3DkB,IAGJH,EACIA,EAAYI,MAAM,EAAGb,GACjBO,EACAI,EAAMb,MACNU,EACAC,EAAYI,MAAMD,GAE1BtB,GACIiB,GAEII,EAAMb,MAAMO,QACXO,EAAQZ,EAAM,IAEpBS,CACV,CAOD,UAAAK,CAAWC,GACP,IAAIC,EAAiB,KA6BrB,OA5BsB/B,KAAKC,OAAO+B,KAAKnB,IACZ,OAAnBkB,IACAA,GACgD,IAA5CpC,EAAkBsC,QAAQpB,EAAMA,OAC1BlB,EACAC,GAGd,IAAIsC,EAAYrB,EAAMA,MAClBsB,GAAU,EAC8B,MAAxCtB,EAAMA,MAAMA,EAAMA,MAAMO,OAAS,KACjCc,EAAYrB,EAAMA,MAAMe,MAAM,EAAGf,EAAMA,MAAMO,OAAS,GACtDe,GAAU,GAGd,IAAIC,EADiBL,EAAeE,QAAQC,GACTJ,EAQnC,OAPIM,EAAgB,EAChBA,GACKL,EAAeX,OAASgB,GAAiBL,EAAeX,OAG7DgB,GAAiBL,EAAeX,OAE7B,CACHP,MAAO,GAAGkB,EAAeK,KAAiBD,EAAU,IAAM,KAC1DrB,SAAUD,EAAMC,SACnB,GAGR,CAOD,YAAAuB,CAAaP,GAET,OADA9B,KAAKC,OAASD,KAAK6B,WAAWC,GACvB9B,IACV,CAQD,gBAAAsC,CAAiBC,EAAMC,GACnB,MAAMC,GAAmD,IAArC9C,EAAkBsC,QAAQM,KACP,IAAnC5C,EAAkBsC,QAAQO,GACxB7C,EACAC,EACA8C,EAAOD,EAAYR,QAAQO,GAAMC,EAAYR,QAAQM,GAE3D,OADAvC,KAAKC,OAASD,KAAK6B,WAAWa,GACvB1C,IACV"}